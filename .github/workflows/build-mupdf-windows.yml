name: build-mupdf-windows

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    name: Build full MuPDF (Windows, MSVC)
    runs-on: windows-latest
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Locate MSBuild (vswhere) and show info
        shell: powershell
        run: |
          Write-Host "Locating MSBuild using vswhere..."
          $vswhere = Join-Path ${env:ProgramFiles(x86)} "Microsoft Visual Studio\Installer\vswhere.exe"
          if (-Not (Test-Path $vswhere)) {
            Write-Host "vswhere not found at $vswhere; attempting common Visual Studio locations..."
          }
          # try vswhere
          $msbuildPath = ""
          if (Test-Path $vswhere) {
            $msbuildPath = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe 2>$null
            $msbuildPath = $msbuildPath.Trim()
          }
          if (-not $msbuildPath) {
            # try common path for VS2022/2019
            $cands = @(
              "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\MSBuild.exe",
              "C:\Program Files\Microsoft Visual Studio\2022\Professional\MSBuild\Current\Bin\MSBuild.exe",
              "C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\MSBuild.exe",
              "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin\MSBuild.exe"
            )
            foreach ($p in $cands) { if (Test-Path $p) { $msbuildPath = $p; break } }
          }
          if (-not $msbuildPath) {
            Write-Host "MSBuild not found via vswhere or common locations. Attempting to initialize Developer Command Prompt..."
            $vsdev = Get-ChildItem 'C:\Program Files (x86)\Microsoft Visual Studio' -Recurse -Filter 'VsDevCmd.bat' -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($vsdev) {
              Write-Host "Sourcing VsDevCmd: $($vsdev.FullName)"
              & "$($vsdev.FullName)" -arch=amd64
              # try vswhere again
              if (Test-Path $vswhere) {
                $msbuildPath = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe 2>$null
                $msbuildPath = $msbuildPath.Trim()
              }
            }
          }
          if (-not $msbuildPath) {
            Write-Error "MSBuild not found on runner. Abort."
            exit 1
          } else {
            Write-Host "MSBuild located at: $msbuildPath"
            & "$msbuildPath" /version
          }

      - name: Build solution with MSBuild (Release; try x64 then Win32)
        shell: powershell
        run: |
          $sln = Join-Path $PWD "platform\win32\mupdf.sln"
          if (-Not (Test-Path $sln)) { Write-Error "Solution not found: $sln"; exit 1 }
          # locate MSBuild (reuse vswhere logic)
          $vswhere = Join-Path ${env:ProgramFiles(x86)} "Microsoft Visual Studio\Installer\vswhere.exe"
          $msbuildPath = ""
          if (Test-Path $vswhere) { $msbuildPath = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe 2>$null; $msbuildPath=$msbuildPath.Trim() }
          if (-not $msbuildPath) {
            $msbuildPath = "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\MSBuild\Current\Bin\MSBuild.exe"
          }
          if (-not (Test-Path $msbuildPath)) { Write-Error "MSBuild not found at $msbuildPath"; exit 1 }
          Write-Host "Using MSBuild: $msbuildPath"
          & "$msbuildPath" $sln /p:Configuration=Release /p:Platform=x64 /m
          if ($LASTEXITCODE -ne 0) {
            Write-Host "x64 build failed (exit $LASTEXITCODE). Trying Win32..."
            & "$msbuildPath" $sln /p:Configuration=Release /p:Platform=Win32 /m
            if ($LASTEXITCODE -ne 0) { Write-Error "MSBuild failed for both x64 and Win32 (exit $LASTEXITCODE)"; exit $LASTEXITCODE }
          }

      - name: Collect executables and package
        shell: powershell
        run: |
          $out = Join-Path $PWD "out"
          New-Item -ItemType Directory -Force -Path $out | Out-Null

          # Find executables (exclude .git)
          $exes = Get-ChildItem -Path $PWD -Filter "*.exe" -Recurse -ErrorAction SilentlyContinue |
                  Where-Object { $_.FullName -notmatch '\\.git\\' -and $_.Length -gt 0 }

          if ($null -eq $exes -or $exes.Count -eq 0) {
            Write-Host "No executables found after build. Listing top-level directories for debug:"
            Get-ChildItem -Path $PWD -Recurse -Depth 2 | Select-Object -First 200
            throw "No executables found"
          }

          foreach ($f in $exes) {
            Copy-Item -Path $f.FullName -Destination (Join-Path $out $f.Name) -Force
          }

          # Create zip
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory($out, "$out\mupdf-windows-full.zip")
          Get-ChildItem -Path $out

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: mupdf-windows
          path: out/*
